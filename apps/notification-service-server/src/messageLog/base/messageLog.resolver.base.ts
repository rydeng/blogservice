/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MessageLog } from "./MessageLog";
import { MessageLogCountArgs } from "./MessageLogCountArgs";
import { MessageLogFindManyArgs } from "./MessageLogFindManyArgs";
import { MessageLogFindUniqueArgs } from "./MessageLogFindUniqueArgs";
import { CreateMessageLogArgs } from "./CreateMessageLogArgs";
import { UpdateMessageLogArgs } from "./UpdateMessageLogArgs";
import { DeleteMessageLogArgs } from "./DeleteMessageLogArgs";
import { MessageLogService } from "../messageLog.service";
@graphql.Resolver(() => MessageLog)
export class MessageLogResolverBase {
  constructor(protected readonly service: MessageLogService) {}

  async _messageLogsMeta(
    @graphql.Args() args: MessageLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MessageLog])
  async messageLogs(
    @graphql.Args() args: MessageLogFindManyArgs
  ): Promise<MessageLog[]> {
    return this.service.messageLogs(args);
  }

  @graphql.Query(() => MessageLog, { nullable: true })
  async messageLog(
    @graphql.Args() args: MessageLogFindUniqueArgs
  ): Promise<MessageLog | null> {
    const result = await this.service.messageLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MessageLog)
  async createMessageLog(
    @graphql.Args() args: CreateMessageLogArgs
  ): Promise<MessageLog> {
    return await this.service.createMessageLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MessageLog)
  async updateMessageLog(
    @graphql.Args() args: UpdateMessageLogArgs
  ): Promise<MessageLog | null> {
    try {
      return await this.service.updateMessageLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MessageLog)
  async deleteMessageLog(
    @graphql.Args() args: DeleteMessageLogArgs
  ): Promise<MessageLog | null> {
    try {
      return await this.service.deleteMessageLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
