/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MessageLog as PrismaMessageLog } from "@prisma/client";

export class MessageLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MessageLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.messageLog.count(args);
  }

  async messageLogs(
    args: Prisma.MessageLogFindManyArgs
  ): Promise<PrismaMessageLog[]> {
    return this.prisma.messageLog.findMany(args);
  }
  async messageLog(
    args: Prisma.MessageLogFindUniqueArgs
  ): Promise<PrismaMessageLog | null> {
    return this.prisma.messageLog.findUnique(args);
  }
  async createMessageLog(
    args: Prisma.MessageLogCreateArgs
  ): Promise<PrismaMessageLog> {
    return this.prisma.messageLog.create(args);
  }
  async updateMessageLog(
    args: Prisma.MessageLogUpdateArgs
  ): Promise<PrismaMessageLog> {
    return this.prisma.messageLog.update(args);
  }
  async deleteMessageLog(
    args: Prisma.MessageLogDeleteArgs
  ): Promise<PrismaMessageLog> {
    return this.prisma.messageLog.delete(args);
  }
}
